# RELAX NG schema for xpcb file format

start = (XPcbBoard | XPcbFp)

# basic types
# boolean value
Bool = ( "1" | "0" )
# display units selection for board/footprint editor 
# (all units are always nm in the XML file)
Units = (element units { "mm" | "mils" })
# unique universal identifier
UuidStr = (xsd:string {length = "38"})
Uuid = (element uuid { UuidStr })
# dimension data type
Dimension = (xsd:int {minInclusive = "0"})
# object id type
ObjID = (xsd:int {minInclusive = "0"})
# coordinate data type
Coord = (xsd:int)
# x,y coordinate pair as attributes
CoordsAttr = (attribute x { Coord }, attribute y { Coord } )
# rotation; currently only 90 degree increments
RotAttr = (attribute rot { "0" | "90" | "180" | "270" } )
# arc direction attributes
ArcDirAttr = (attribute dir { "cw" | "ccw" })
# layer index
Layer = (xsd:int)

# toplevel element
XPcbBoard = element xpcbBoard 
{ 
	Properties, Padstacks, Footprints, Outline, 
	Parts, Netlist, Traces, Areas, Texts
}

XPcbFp = element xpcbFootprint
{
	Footprint
}

# Board properties
Properties = element props 
{ 
		element name { xsd:string } &
		Units &
		element numLayers { xsd:int {minInclusive = "2"} } &
		element defaultPadstack {UuidStr}
}

# Padstacks section
Padstacks = element padstacks 
{
	Padstack*
}
# padstack definition
Padstack = element padstack {
	attribute name { xsd:string }?,
	attribute uuid { UuidStr },
	attribute holesize { Dimension},
	element startpad { PadDef? }, 
	element innerpad {PadDef?},
	element endpad { PadDef? },
	element startmask { PadDef? },
	element endmask { PadDef? },
	element startpaste {PadDef? },
	element endpaste {PadDef? }
}
# Padstack reference
PSRef = attribute padstack { UuidStr }
# pin reference
PinRef = element pinRef {
	attribute partref { xsd:string },
	attribute pinname { xsd:string } 
}

# Footprints section
Footprints = element footprints
{
	Footprint*
}
# footprint definition
Footprint = element footprint
{
	element name { xsd:string },
	Uuid,
	Units,
	element author { xsd:string }?,
	element source { xsd:string }?,
	element desc { xsd:string }?,
	element centroid { CoordsAttr, attribute custom {Bool}? },
	(Line | Arc | Text)*,
	Padstacks,
	Pins,
	RefText,
	ValueText
}

# Pins section
Pins = element pins 
{
	Pin*
}
# Pin definition
Pin = element pin
{
	attribute name { xsd:string },
	CoordsAttr,
	RotAttr,
	PSRef	
}

# pad definition
PadDef = element pad { (RoundPad | SquarePad | RectPad | ObroundPad | OctagonPad | DefaultPad) }
RoundPad = (attribute shape {"round"},
	attribute width {Dimension})
SquarePad = (attribute shape {"square"},
	attribute width {Dimension})
RectPad = (attribute shape {"rect"},
	attribute width {Dimension},
	attribute height {Dimension})
ObroundPad  = (attribute shape {"obround"},
	attribute width {Dimension},
	attribute height {Dimension})
OctagonPad = (attribute shape {"octagon"},
	attribute width {Dimension})
DefaultPad = (attribute shape {"default"})

PartText = (CoordsAttr,
	RotAttr,
	attribute lineWidth {Dimension},
	attribute textSize { Dimension },
	attribute visible {Bool}?)

# element reference text location
RefText = element refText {
	PartText
}

# element value text position
ValueText = element valueText {
	PartText
}

# board outline
Outline = element outline {
	Polygon*
}

# Parts section
Parts = element parts {
	Part*
}
# part definition
Part = element part {
	attribute refdes { xsd:string },
	attribute value { xsd:string }?,
	attribute footprint_uuid { UuidStr },
	CoordsAttr,
	RotAttr,
	attribute side {"top" | "bot"},
	attribute locked {Bool}?,
	RefText?,
	ValueText?
}

# Nets section
Netlist = element netlist {
	NetlistPart*,
	Net*
}

NetlistPart = element part {
	attribute refdes { xsd:string },
	attribute value { xsd:string }?,
	attribute footprint { xsd:string }
}

# Net definition
Net = element net {
	attribute name { xsd:string },
	attribute visible {Bool}?,
	attribute defViaPadstack {UuidStr}?,
	PinRef+
}

# Traces section
Traces = element traces {
	element vertices {
		Vertex*
	},
	element segments {
		Segment*
	}
}

# Vertex defintion
Vertex = element vertex {
	attribute id { ObjID },
	CoordsAttr,
	attribute forcevia { Bool }?,
	PSRef?
}

# Segment definition
Segment = element segment {
	attribute start { ObjID },
	attribute end { ObjID },
	attribute layer { Layer },
	attribute width { Dimension }
}

# polygon definition
Polygon = element polygon {
	PolygonOutline,
	PolygonHole*
}
# polygon outline
PolygonOutline = element outline { Contour }
# polygon hole
PolygonHole = element hole { Contour }

# contour
Contour = ((ContourStart, (LineTo | ArcTo)+)+)
# contour start marker
ContourStart = element start { CoordsAttr }
# contour lineTo marker
LineTo = element lineTo { CoordsAttr }
# contour arcTo marker
ArcTo = element arcTo { CoordsAttr, ArcDirAttr }

# line definition
Line = element line {
	attribute width {Dimension},
	attribute layer {Layer},
	attribute x1 {Coord},
	attribute y1 {Coord},
	attribute x2 {Coord},
	attribute y2 {Coord}
}

# arc definition
Arc = element arc {
	attribute width {Dimension},
	attribute layer {Layer},
	attribute x1 {Coord},
	attribute y1 {Coord},
	attribute x2 {Coord},
	attribute y2 {Coord},
	ArcDirAttr
}


# areas section
Areas = element areas {
	Area*
}
# area definition
Area = element area {
	attribute net { xsd:string },
	attribute layer { Layer },
	attribute hatch { "none" | "full" | "edge" },
	attribute connectSmt { Bool },
	Polygon
}

# Texts section
Texts = element texts {
	Text*
}
# Text definition
Text = element \text {
	attribute layer {Layer},
	CoordsAttr,
	RotAttr,
	attribute lineWidth {Dimension},
	attribute textSize {Dimension},
	xsd:string
}

